import unittest

import numpy as np
import tensorflow as tf

from audiocodec import psychoacoustic
from audiocodec.mdct import MDCT
from audiocodec.tests import mdct as mdct_tests

EPS = 1e-5


class TestPsychoacoustic(unittest.TestCase):
  def test_masking_threshold(self):
    filters_n = 256
    sample_rate = 64*filters_n
    mdct = MDCT(filters_n)
    # create test signal
    wave_data = mdct_tests.sine_wav(0.8, 1024, sample_rate=sample_rate, duration_sec=5.)
    # transform
    ampl = mdct.transform(wave_data)
    # todo: need to get rid of this rescaling...
    ampl = ampl * 10**5

    pa_model = psychoacoustic.PsychoacousticModel(sample_rate=sample_rate, filter_bands_n=filters_n)
    tonality = pa_model.tonality(ampl)
    masking_threshold = pa_model.global_masking_threshold(ampl, tonality)
    quiet_threshold = pa_model._mappingfrombark(pa_model._quiet_threshold_amplitude_in_bark(dtype=tf.float32))

    # convert to dB [just for plotting convenience]
    intensity_dB = 10. * tf.math.log(ampl ** 2.0) / tf.math.log(10.)
    masking_threshold_dB = 10. * tf.math.log(masking_threshold ** 2.0) / tf.math.log(10.)
    quiet_threshold_dB = 10. * tf.math.log(quiet_threshold ** 2.0) / tf.math.log(10.)

    intensity_dB_correct = [-4.02038908, -3.99509621, -3.19901395, -4.27961969, -2.1361413, -3.62612677, -0.89654,
                            -2.42287517, 0.415709436, -0.991663277, 2.33745766, 0.804221451, 4.93179, 3.65039945,
                            7.37759686, 5.56786537, 10.258626, 8.74104309, 13.7701321, 12.4137659, 17.9047642,
                            16.8561573, 22.8504105, 22.2962112, 29.0406628, 29.319519, 37.155983, 37.9529915,
                            48.6682892, 62.3873405, 65.73909, 83.8646317, 87.3667, 62.236618, 65.8887634, 45.161232,
                            41.4415054, 33.6369095, 32.7923088, 25.4919624, 25.7418613, 19.2506638, 20.2329922,
                            14.2201986, 15.6529226, 9.96308708, 11.7609863, 6.32371521, 8.46624565, 2.64773726,
                            5.12642908, -0.562355816, 2.74884796, -2.40588427, 0.483656794, -5.01942348, -1.77885,
                            -7.32983589, -3.76723623, -9.62242794, -5.70233679, -12.0990934, -7.24854469, -13.1864157,
                            -8.66768932, -15.3380432, -10.2682371, -16.014637, -13.1628103, -18.1783314, -13.8293114,
                            -18.7790852, -13.4054928, -21.9592953, -15.3627367, -22.3291016, -15.9883699, -23.1051979,
                            -17.9469566, -24.9154415, -18.6655636, -25.3019047, -18.3014565, -26.7552586, -20.2204418,
                            -26.8473091, -19.3284702, -21.050211, -21.3482819, -27.8262272, -21.9106026, -31.0747643,
                            -23.096035, -27.4878521, -23.833847, -29.8816376, -23.8304729, -25.7919044, -25.3361168,
                            -29.8200455, -26.3700314, -31.3672523, -26.2382812, -29.9704781, -26.8464394, -33.3701363,
                            -22.5693, -32.4354935, -28.5095253, -32.6215668, -30.6691017, -31.6644421, -27.597538,
                            -33.1075134, -29.8922939, -33.1830063, -26.6943893, -31.5381374, -30.6301403, -33.0429802,
                            -32.7308044, -32.3179131, -30.981596, -44.8475304, -33.2681503, -50.0969124, -36.2957573,
                            -32.4353294, -35.1261826, -34.7039108, -35.7288055, -38.504303, -39.2518501, -44.2975121,
                            -37.1486549, -64.6960068, -38.0443726, -39.5501633, -39.8926697, -45.7788429, -38.6359711,
                            -45.2977486, -39.7830124, -42.7525406, -51.9911957, -43.293232, -34.5071487, -56.2073517,
                            -42.7223358, -46.1504211, -40.0549316, -52.847847, -50.0044022, -40.0843964, -47.4518089,
                            -52.5085068, -35.3069038, -54.9012184, -42.0296211, -50.2477188, -37.1391144, -33.5281067,
                            -42.4335518, -52.4571, -35.5856857, -40.3963242, -36.6591644, -43.4155502, -37.6730232,
                            -48.1866035, -35.2307892, -35.9902382, -40.7354393, -41.1507263, -38.8187408, -46.3573303,
                            -36.8834038, -40.2734833, -36.5168076, -36.7699089, -30.095953, -38.756218, -36.8430328,
                            -41.9044914, -47.9817162, -36.5408325, -35.4718399, -39.7054329, -37.4816055, -37.6885757,
                            -34.9403, -35.3119392, -36.855217, -40.1831741, -38.3718719, -36.8128471, -34.8807602,
                            -49.1296768, -32.3322487, -48.1957092, -36.3276596, -34.4182167, -37.0122643, -34.4855957,
                            -33.1506081, -35.8587952, -36.1797066, -37.0713654, -33.6160278, -35.1546974, -33.6991653,
                            -32.4446602, -39.4704475, -33.1121178, -35.941185, -32.8616524, -54.4216499, -38.1373367,
                            -63.2112389, -30.8402195, -36.8472214, -31.1854954, -55.7106438, -34.8602943, -53.3741341,
                            -32.2940674, -44.4149933, -37.6956749, -43.7474289, -34.756218, -65.7923126, -33.2855339,
                            -41.1543388, -35.7532501, -38.5373535, -30.5386562, -35.415287, -33.7696228, -43.0279617,
                            -43.0171776, -40.5428123, -34.784874, -34.9410095, -34.9362144, -37.4368553, -34.5168953,
                            -32.6423149, -38.766346, -34.6585693, -40.0772781, -36.8452911, -39.3740654, -35.9526672,
                            -33.89674, -47.2173576, -38.3964386]

    masking_threshold_dB_correct = [101.991814, 42.3141022, 28.0741138, 21.3984108, 17.4469299, 14.8021431, 12.8907795,
                                    11.4346275, 10.2815466, 9.341, 8.55555344, 7.8869319, 5.64117718, 5.64117718,
                                    14.0856514, 20.259367, 26.8085384, 30.4718647, 30.4718647, 40.1108665, 43.5450974,
                                    43.5450974, 52.6570473, 55.1857758, 55.1857758, 62.8727608, 63.3406525, 63.3406525,
                                    65.3782349, 65.3782349, 65.9605789, 65.9605789, 65.3173676, 65.3173676, 63.7896118,
                                    63.7896118, 61.6769, 61.6769, 59.1865196, 59.1865196, 56.4490318, 56.4490318,
                                    51.7842445, 51.7842445, 51.7842445, 50.5256119, 50.5256119, 45.6621895, 45.6621895,
                                    45.6621895, 42.4985161, 42.4985161, 42.4985161, 39.2886581, 39.2886581, 39.2886581,
                                    36.0431595, 36.0431595, 36.0431595, 32.7696609, 32.7696609, 32.7696609, 28.2244549,
                                    28.2244549, 28.2244549, 28.2244549, 26.1599617, 26.1599617, 26.1599617, 21.5819359,
                                    21.5819359, 21.5819359, 21.5819359, 18.2412071, 18.2412071, 18.2412071, 18.2412071,
                                    14.890523, 14.890523, 14.890523, 14.890523, 10.5625763, 10.5625763, 10.5625763,
                                    10.5625763, 10.5625763, 8.16617775, 8.16617775, 8.16617775, 8.16617775, 3.82629108,
                                    3.82629108, 3.82629108, 3.82629108, 3.82629108, 0.451506108, 0.451506108,
                                    0.451506108, 0.451506108, 0.451506108, -3.71792793, -3.71792793, -3.71792793,
                                    -3.71792793, -3.71792793, -3.71792793, -6.30565119, -6.30565119, -6.30565119,
                                    -6.30565119, -6.30565119, -10.4782839, -10.4782839, -10.4782839, -10.4782839,
                                    -10.4782839, -10.4782839, -12.4028406, -12.4028406, -12.4028406, -12.4028406,
                                    -12.4028406, -12.4028406, -12.4028406, -10.9192219, -10.9192219, -10.9192219,
                                    -10.9192219, -10.9192219, -10.9192219, -10.6408491, -10.6408491, -10.6408491,
                                    -10.6408491, -10.6408491, -10.6408491, -10.6408491, -10.2393885, -10.2393885,
                                    -10.2393885, -10.2393885, -10.2393885, -10.2393885, -10.2393885, -10.2393885,
                                    -8.7431612, -8.7431612, -8.7431612, -8.7431612, -8.7431612, -8.7431612, -8.7431612,
                                    -8.5441227, -8.5441227, -8.5441227, -8.5441227, -8.5441227, -8.5441227, -8.5441227,
                                    -8.5441227, -8.44307327, -8.44307327, -8.44307327, -8.44307327, -8.44307327,
                                    -8.44307327, -8.44307327, -8.44307327, -8.44307327, -7.98074, -7.98074, -7.98074,
                                    -7.98074, -7.98074, -7.98074, -7.98074, -7.98074, -7.98074, -8.07801151,
                                    -8.07801151, -8.07801151, -8.07801151, -8.07801151, -8.07801151, -8.07801151,
                                    -8.07801151, -8.07801151, -8.07801151, -7.75974751, -7.75974751, -7.75974751,
                                    -7.75974751, -7.75974751, -7.75974751, -7.75974751, -7.75974751, -7.75974751,
                                    -7.75974751, -7.4286828, -7.4286828, -7.4286828, -7.4286828, -7.4286828, -7.4286828,
                                    -7.4286828, -7.4286828, -7.4286828, -7.4286828, -7.45624542, -7.45624542,
                                    -7.45624542, -7.45624542, -7.45624542, -7.45624542, -7.45624542, -7.45624542,
                                    -7.45624542, -7.45624542, -7.45624542, -7.36047745, -7.36047745, -7.36047745,
                                    -7.36047745, -7.36047745, -7.36047745, -7.36047745, -7.36047745, -7.36047745,
                                    -7.36047745, -7.36047745, -7.36047745, -6.77217245, -6.77217245, -6.77217245,
                                    -6.77217245, -6.77217245, -6.77217245, -6.77217245, -6.77217245, -6.77217245,
                                    -6.77217245, -6.77217245, -6.77217245, -6.38850212, -6.38850212, -6.38850212,
                                    -6.38850212, -6.38850212, -6.38850212, -6.38850212, -6.38850212, -6.38850212,
                                    -6.38850212, -6.38850212, -6.38850212, -6.38850212]

    quiet_threshold_dB_correct = [101.991814, 42.3141022, 28.0741138, 21.3984108, 17.4469299, 14.8021431, 12.8907795,
                                  11.4346275, 10.2815466, 9.341, 8.55555344, 7.8869319, 4.29827118, 4.29827118,
                                  6.80141973, 6.35140657, 5.94788218, 2.57228827, 2.57228827, 5.24898863, 1.93148375,
                                  1.93148375, 4.65657711, 1.37932646, 1.37932646, 4.13766193, 0.887422323, 0.887422323,
                                  0.656743824, 0.656743824, 0.432641625, 0.432641625, 0.212422311, 0.212422311,
                                  -0.00671483157, -0.00671483157, -0.22775878, -0.22775878, -0.453976035, -0.453976035,
                                  -0.688987195, -0.688987195, -2.69774055, -2.69774055, -2.69774055, -1.20200253,
                                  -1.20200253, -3.25038266, -3.25038266, -3.25038266, -3.56551218, -3.56551218,
                                  -3.56551218, -3.91390443, -3.91390443, -3.91390443, -4.30108166, -4.30108166,
                                  -4.30108166, -4.73196507, -4.73196507, -4.73196507, -6.45947361, -6.45947361,
                                  -6.45947361, -6.45947361, -5.73644972, -5.73644972, -5.73644972, -7.55747747,
                                  -7.55747747, -7.55747747, -7.55747747, -8.16566467, -8.16566467, -8.16566467,
                                  -8.16566467, -8.79397583, -8.79397583, -8.79397583, -8.79397583, -10.385684,
                                  -10.385684, -10.385684, -10.385684, -10.385684, -9.99727154, -9.99727154, -9.99727154,
                                  -9.99727154, -11.4591246, -11.4591246, -11.4591246, -11.4591246, -11.4591246,
                                  -11.8111153, -11.8111153, -11.8111153, -11.8111153, -11.8111153, -12.7606907,
                                  -12.7606907, -12.7606907, -12.7606907, -12.7606907, -12.7606907, -11.8876829,
                                  -11.8876829, -11.8876829, -11.8876829, -11.8876829, -12.3348331, -12.3348331,
                                  -12.3348331, -12.3348331, -12.3348331, -12.3348331, -12.4028406, -12.4028406,
                                  -12.4028406, -12.4028406, -12.4028406, -12.4028406, -12.4028406, -10.9192219,
                                  -10.9192219, -10.9192219, -10.9192219, -10.9192219, -10.9192219, -10.6408491,
                                  -10.6408491, -10.6408491, -10.6408491, -10.6408491, -10.6408491, -10.6408491,
                                  -10.2393885, -10.2393885, -10.2393885, -10.2393885, -10.2393885, -10.2393885,
                                  -10.2393885, -10.2393885, -8.7431612, -8.7431612, -8.7431612, -8.7431612, -8.7431612,
                                  -8.7431612, -8.7431612, -8.5441227, -8.5441227, -8.5441227, -8.5441227, -8.5441227,
                                  -8.5441227, -8.5441227, -8.5441227, -8.44307327, -8.44307327, -8.44307327,
                                  -8.44307327, -8.44307327, -8.44307327, -8.44307327, -8.44307327, -8.44307327,
                                  -7.98074, -7.98074, -7.98074, -7.98074, -7.98074, -7.98074, -7.98074, -7.98074,
                                  -7.98074, -8.07801151, -8.07801151, -8.07801151, -8.07801151, -8.07801151,
                                  -8.07801151, -8.07801151, -8.07801151, -8.07801151, -8.07801151, -7.75974751,
                                  -7.75974751, -7.75974751, -7.75974751, -7.75974751, -7.75974751, -7.75974751,
                                  -7.75974751, -7.75974751, -7.75974751, -7.4286828, -7.4286828, -7.4286828, -7.4286828,
                                  -7.4286828, -7.4286828, -7.4286828, -7.4286828, -7.4286828, -7.4286828, -7.45624542,
                                  -7.45624542, -7.45624542, -7.45624542, -7.45624542, -7.45624542, -7.45624542,
                                  -7.45624542, -7.45624542, -7.45624542, -7.45624542, -7.36047745, -7.36047745,
                                  -7.36047745, -7.36047745, -7.36047745, -7.36047745, -7.36047745, -7.36047745,
                                  -7.36047745, -7.36047745, -7.36047745, -7.36047745, -6.77217245, -6.77217245,
                                  -6.77217245, -6.77217245, -6.77217245, -6.77217245, -6.77217245, -6.77217245,
                                  -6.77217245, -6.77217245, -6.77217245, -6.77217245, -6.38850212, -6.38850212,
                                  -6.38850212, -6.38850212, -6.38850212, -6.38850212, -6.38850212, -6.38850212,
                                  -6.38850212, -6.38850212, -6.38850212, -6.38850212, -6.38850212]

    tf.print(intensity_dB[0, 3, :, 0], summarize=20)
    tf.print(tf.constant(intensity_dB_correct), summarize=20)
    tf.print()
    tf.print(masking_threshold_dB[0, 3, :, 0], summarize=20)
    tf.print(tf.constant(masking_threshold_dB_correct), summarize=20)
    tf.print()
    tf.print(quiet_threshold_dB[0, 0, :, 0], summarize=20)
    tf.print(tf.constant(quiet_threshold_dB_correct), summarize=20)
    tf.print()

    for i in range(filters_n):
      self.assertLess(np.fabs(intensity_dB[0, 3, i, 0].numpy() - intensity_dB_correct[i]), EPS)
      self.assertLess(np.fabs(masking_threshold_dB[0, 3, i, 0].numpy() - masking_threshold_dB_correct[i]), EPS)
      self.assertLess(np.fabs(quiet_threshold_dB[0, 0, i, 0].numpy() - quiet_threshold_dB_correct[i]), EPS)

  def test_tonality_tone(self):
    filters_n = 64
    mdct = MDCT(filters_n)
    # create test signal
    wave_data = mdct_tests.sine_wav(0.8, 4, sample_rate=64, duration_sec=5.)
    # transform
    spectrum = mdct.transform(wave_data)

    pa_model = psychoacoustic.PsychoacousticModel(sample_rate=filters_n, filter_bands_n=filters_n)
    tonality = pa_model.tonality(spectrum)
    self.assertEqual(tonality[0, 1], 1.)

  def test_tonality_noise(self):
    filters_n = 64
    blocks_n = 10
    mdct = MDCT(filters_n)
    # create test signal
    batches_n = 10
    channels_n = 2
    wave_data = tf.random.uniform(shape=(batches_n, blocks_n*filters_n, channels_n), minval=-1.0, maxval=1.0)
    # transform
    spectrum = mdct.transform(wave_data)

    pa_model = psychoacoustic.PsychoacousticModel(sample_rate=filters_n, filter_bands_n=filters_n)
    tonality = pa_model.tonality(spectrum)

    # check tonality shape
    self.assertEqual(tonality.shape[0], batches_n)
    self.assertEqual(tonality.shape[1], blocks_n+1)
    self.assertEqual(tonality.shape[2], 1)
    self.assertEqual(tonality.shape[3], channels_n)

    # check tonality is low
    self.assertLess(tf.reduce_mean(tonality[0, 1:-1]), 0.1)


if __name__ == '__main__':
  unittest.main()
